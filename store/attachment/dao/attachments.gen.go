// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"github.com/lyricat/goutils/model/core"
)

func newAttachment(db *gorm.DB, opts ...gen.DOOption) attachment {
	_attachment := attachment{}

	_attachment.attachmentDo.UseDB(db, opts...)
	_attachment.attachmentDo.UseModel(&core.Attachment{})

	tableName := _attachment.attachmentDo.TableName()
	_attachment.ALL = field.NewAsterisk(tableName)
	_attachment.ID = field.NewUint64(tableName, "id")
	_attachment.OwnerID = field.NewUint64(tableName, "owner_id")
	_attachment.BucketName = field.NewString(tableName, "bucket_name")
	_attachment.HashID = field.NewString(tableName, "hash_id")
	_attachment.Size = field.NewInt64(tableName, "size")
	_attachment.MimeType = field.NewString(tableName, "mime_type")
	_attachment.Pathname = field.NewString(tableName, "pathname")
	_attachment.Filename = field.NewString(tableName, "filename")
	_attachment.Status = field.NewInt(tableName, "status")
	_attachment.OriginalMimeType = field.NewString(tableName, "original_mime_type")
	_attachment.Checksum = field.NewString(tableName, "checksum")
	_attachment.ChecksumMethod = field.NewString(tableName, "checksum_method")
	_attachment.CreatedAt = field.NewTime(tableName, "created_at")
	_attachment.UpdatedAt = field.NewTime(tableName, "updated_at")

	_attachment.fillFieldMap()

	return _attachment
}

type attachment struct {
	attachmentDo

	ALL              field.Asterisk
	ID               field.Uint64
	OwnerID          field.Uint64
	BucketName       field.String
	HashID           field.String
	Size             field.Int64
	MimeType         field.String
	Pathname         field.String
	Filename         field.String
	Status           field.Int
	OriginalMimeType field.String
	Checksum         field.String
	ChecksumMethod   field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (a attachment) Table(newTableName string) *attachment {
	a.attachmentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attachment) As(alias string) *attachment {
	a.attachmentDo.DO = *(a.attachmentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attachment) updateTableName(table string) *attachment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint64(table, "id")
	a.OwnerID = field.NewUint64(table, "owner_id")
	a.BucketName = field.NewString(table, "bucket_name")
	a.HashID = field.NewString(table, "hash_id")
	a.Size = field.NewInt64(table, "size")
	a.MimeType = field.NewString(table, "mime_type")
	a.Pathname = field.NewString(table, "pathname")
	a.Filename = field.NewString(table, "filename")
	a.Status = field.NewInt(table, "status")
	a.OriginalMimeType = field.NewString(table, "original_mime_type")
	a.Checksum = field.NewString(table, "checksum")
	a.ChecksumMethod = field.NewString(table, "checksum_method")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *attachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attachment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["owner_id"] = a.OwnerID
	a.fieldMap["bucket_name"] = a.BucketName
	a.fieldMap["hash_id"] = a.HashID
	a.fieldMap["size"] = a.Size
	a.fieldMap["mime_type"] = a.MimeType
	a.fieldMap["pathname"] = a.Pathname
	a.fieldMap["filename"] = a.Filename
	a.fieldMap["status"] = a.Status
	a.fieldMap["original_mime_type"] = a.OriginalMimeType
	a.fieldMap["checksum"] = a.Checksum
	a.fieldMap["checksum_method"] = a.ChecksumMethod
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a attachment) clone(db *gorm.DB) attachment {
	a.attachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attachment) replaceDB(db *gorm.DB) attachment {
	a.attachmentDo.ReplaceDB(db)
	return a
}

type attachmentDo struct{ gen.DO }

type IAttachmentDo interface {
	gen.SubQuery
	Debug() IAttachmentDo
	WithContext(ctx context.Context) IAttachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttachmentDo
	WriteDB() IAttachmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttachmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttachmentDo
	Not(conds ...gen.Condition) IAttachmentDo
	Or(conds ...gen.Condition) IAttachmentDo
	Select(conds ...field.Expr) IAttachmentDo
	Where(conds ...gen.Condition) IAttachmentDo
	Order(conds ...field.Expr) IAttachmentDo
	Distinct(cols ...field.Expr) IAttachmentDo
	Omit(cols ...field.Expr) IAttachmentDo
	Join(table schema.Tabler, on ...field.Expr) IAttachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo
	Group(cols ...field.Expr) IAttachmentDo
	Having(conds ...gen.Condition) IAttachmentDo
	Limit(limit int) IAttachmentDo
	Offset(offset int) IAttachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentDo
	Unscoped() IAttachmentDo
	Create(values ...*core.Attachment) error
	CreateInBatches(values []*core.Attachment, batchSize int) error
	Save(values ...*core.Attachment) error
	First() (*core.Attachment, error)
	Take() (*core.Attachment, error)
	Last() (*core.Attachment, error)
	Find() ([]*core.Attachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*core.Attachment, err error)
	FindInBatches(result *[]*core.Attachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*core.Attachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttachmentDo
	Assign(attrs ...field.AssignExpr) IAttachmentDo
	Joins(fields ...field.RelationField) IAttachmentDo
	Preload(fields ...field.RelationField) IAttachmentDo
	FirstOrInit() (*core.Attachment, error)
	FirstOrCreate() (*core.Attachment, error)
	FindByPage(offset int, limit int) (result []*core.Attachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	CreateAttachment(ctx context.Context, att *core.Attachment) (result uint64, err error)
	GetAttachment(ctx context.Context, id uint64) (result *core.Attachment, err error)
	GetAttachmentByHashID(ctx context.Context, hashID string) (result *core.Attachment, err error)
	GetAttachmentByChecksum(ctx context.Context, method string, checksum string) (result *core.Attachment, err error)
	GetAttachmentsByStatus(ctx context.Context, status int, limit uint64) (result []*core.Attachment, err error)
	UpdateAttachment(ctx context.Context, att *core.Attachment) (err error)
}

// INSERT INTO @@table
// (owner_id, bucket_name, hash_id,
//
//	size, mime_type, pathname, filename,
//	status,
//	original_mime_type,
//	checksum, checksum_method,
//	created_at, updated_at
//
// )
// VALUES
// (
//
//	@att.OwnerID, @att.BucketName, @att.HashID,
//	@att.Size, @att.MimeType, @att.Pathname, @att.Filename,
//	@att.Status,
//	@att.OriginalMimeType,
//	@att.Checksum, @att.ChecksumMethod,
//	NOW(), NOW()
//
// )
// RETURNING id;
func (a attachmentDo) CreateAttachment(ctx context.Context, att *core.Attachment) (result uint64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, att.OwnerID)
	params = append(params, att.BucketName)
	params = append(params, att.HashID)
	params = append(params, att.Size)
	params = append(params, att.MimeType)
	params = append(params, att.Pathname)
	params = append(params, att.Filename)
	params = append(params, att.Status)
	params = append(params, att.OriginalMimeType)
	params = append(params, att.Checksum)
	params = append(params, att.ChecksumMethod)
	generateSQL.WriteString("INSERT INTO attachments (owner_id, bucket_name, hash_id, size, mime_type, pathname, filename, status, original_mime_type, checksum, checksum_method, created_at, updated_at ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW() ) RETURNING id; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// WHERE id = @id
// LIMIT 1;
func (a attachmentDo) GetAttachment(ctx context.Context, id uint64) (result *core.Attachment, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM attachments WHERE id = ? LIMIT 1; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// WHERE hash_id = @hashID
// LIMIT 1;
func (a attachmentDo) GetAttachmentByHashID(ctx context.Context, hashID string) (result *core.Attachment, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, hashID)
	generateSQL.WriteString("SELECT * FROM attachments WHERE hash_id = ? LIMIT 1; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// WHERE checksum_method = @method AND checksum = @checksum
// LIMIT 1;
func (a attachmentDo) GetAttachmentByChecksum(ctx context.Context, method string, checksum string) (result *core.Attachment, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, method)
	params = append(params, checksum)
	generateSQL.WriteString("SELECT * FROM attachments WHERE checksum_method = ? AND checksum = ? LIMIT 1; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// WHERE status = @status
// LIMIT @limit;
func (a attachmentDo) GetAttachmentsByStatus(ctx context.Context, status int, limit uint64) (result []*core.Attachment, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, status)
	params = append(params, limit)
	generateSQL.WriteString("SELECT * FROM attachments WHERE status = ? LIMIT ?; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
// {{set}}
//
//	hash_id = @att.HashID,
//	filename = @att.Filename,
//	status = @att.Status,
//	checksum = @att.Checksum,
//
// {{end}}
// WHERE
// "id" = @att.ID;
func (a attachmentDo) UpdateAttachment(ctx context.Context, att *core.Attachment) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE attachments ")
	var setSQL0 strings.Builder
	params = append(params, att.HashID)
	params = append(params, att.Filename)
	params = append(params, att.Status)
	params = append(params, att.Checksum)
	setSQL0.WriteString("hash_id = ?, filename = ?, status = ?, checksum = ?, ")
	helper.JoinSetBuilder(&generateSQL, setSQL0)
	params = append(params, att.ID)
	generateSQL.WriteString("WHERE \"id\" = ?; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a attachmentDo) Debug() IAttachmentDo {
	return a.withDO(a.DO.Debug())
}

func (a attachmentDo) WithContext(ctx context.Context) IAttachmentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attachmentDo) ReadDB() IAttachmentDo {
	return a.Clauses(dbresolver.Read)
}

func (a attachmentDo) WriteDB() IAttachmentDo {
	return a.Clauses(dbresolver.Write)
}

func (a attachmentDo) Session(config *gorm.Session) IAttachmentDo {
	return a.withDO(a.DO.Session(config))
}

func (a attachmentDo) Clauses(conds ...clause.Expression) IAttachmentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attachmentDo) Returning(value interface{}, columns ...string) IAttachmentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attachmentDo) Not(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attachmentDo) Or(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attachmentDo) Select(conds ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attachmentDo) Where(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attachmentDo) Order(conds ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attachmentDo) Distinct(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attachmentDo) Omit(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attachmentDo) Join(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attachmentDo) Group(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attachmentDo) Having(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attachmentDo) Limit(limit int) IAttachmentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attachmentDo) Offset(offset int) IAttachmentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attachmentDo) Unscoped() IAttachmentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attachmentDo) Create(values ...*core.Attachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attachmentDo) CreateInBatches(values []*core.Attachment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attachmentDo) Save(values ...*core.Attachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attachmentDo) First() (*core.Attachment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*core.Attachment), nil
	}
}

func (a attachmentDo) Take() (*core.Attachment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*core.Attachment), nil
	}
}

func (a attachmentDo) Last() (*core.Attachment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*core.Attachment), nil
	}
}

func (a attachmentDo) Find() ([]*core.Attachment, error) {
	result, err := a.DO.Find()
	return result.([]*core.Attachment), err
}

func (a attachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*core.Attachment, err error) {
	buf := make([]*core.Attachment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attachmentDo) FindInBatches(result *[]*core.Attachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attachmentDo) Attrs(attrs ...field.AssignExpr) IAttachmentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attachmentDo) Assign(attrs ...field.AssignExpr) IAttachmentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attachmentDo) Joins(fields ...field.RelationField) IAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attachmentDo) Preload(fields ...field.RelationField) IAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attachmentDo) FirstOrInit() (*core.Attachment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*core.Attachment), nil
	}
}

func (a attachmentDo) FirstOrCreate() (*core.Attachment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*core.Attachment), nil
	}
}

func (a attachmentDo) FindByPage(offset int, limit int) (result []*core.Attachment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attachmentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attachmentDo) Delete(models ...*core.Attachment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attachmentDo) withDO(do gen.Dao) *attachmentDo {
	a.DO = *do.(*gen.DO)
	return a
}
